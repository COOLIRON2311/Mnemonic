#include "GaussianSplatting.hlsl"

#pragma kernel GSSetSortIndices
#pragma kernel GSComputeDistances
#pragma kernel GSProcess

uint _SHDeg;
float _ScaleModifier;

float4x4 _WorldToCameraMatrix;
StructuredBuffer<Gaussian> _GSDataBuffer;

uint _Count;
uint _CountPow2;
RWStructuredBuffer<uint> _SortKeys;
RWStructuredBuffer<uint> _SortDistances;

float2 _Focal;
float2 _TanFov;
float3 _WorldCameraPos;
float4x4 _MatrixV;
float4x4 _MatrixVP;
float4x4 _MatrixObjectToWorld;
float4x4 _MatrixWorldToObject;
RWStructuredBuffer<GSViewData> _GSViewBuffer;

[numthreads(1024, 1, 1)]
void GSSetSortIndices(uint3 id : SV_DISPATCHTHREADID)
{
    uint idx = id.x;
    if (idx < _CountPow2)
        _SortKeys[idx] = idx;
}

[numthreads(1024, 1, 1)]
void GSComputeDistances(uint3 id : SV_DISPATCHTHREADID)
{
    uint idx = id.x;
    if (idx >= _CountPow2)
        return;

    if (idx >= _Count)
    {
        // pad data with zeros to the nearest power of 2
        _SortDistances[idx] = 0;
        return;
    }

    uint i = _SortKeys[idx];

    float3 pos = mul(_WorldToCameraMatrix, float4(_GSDataBuffer[i].pos * float3(1, 1, -1), 1)).xyz;
    // make distance sort friendly http://stereopsis.com/radix.html
    uint fu = asuint(pos.z);
    uint mask = - ((int) (fu >> 31)) | 0x80000000;
    _SortDistances[idx] = fu ^ mask;
}

[numthreads(768, 1, 1)]
void GSProcess(uint3 id : SV_DISPATCHTHREADID)
{
    uint idx = id.x;
    if (idx >= _Count)
        return;

    Gaussian splat = _GSDataBuffer[idx];
    GSViewData view = (GSViewData)0;

    float3 centerWorldPos = splat.pos;

    centerWorldPos = mul(_MatrixObjectToWorld, float4(centerWorldPos, 1)).xyz;
    float4 centerClipPos = mul(_MatrixVP, float4(centerWorldPos, 1));
    view.pos = centerClipPos;

    if (centerClipPos.w > 0) // not behind the camera
    {
        float3x3 modelMat = computeModelMatrix(splat.scale, _ScaleModifier, splat.rot);
        modelMat = mul((float3x3)_MatrixObjectToWorld, modelMat);

        float3 cov3D0, cov3D1;
        GS_computeCov3D(modelMat, cov3D0, cov3D1);

        float3 cov = GS_computeCov2D(centerWorldPos, _Focal, _TanFov, cov3D0, cov3D1, _MatrixV);

        float det = cov.x * cov.z - cov.y * cov.y;

        float mid = 0.5 * (cov.x + cov.z);
        float lambda1 = mid + sqrt(max(0.1, mid * mid - det));
        float lambda2 = mid - sqrt(max(0.1, mid * mid - det));
        float radius = ceil(3.0 * sqrt(max(lambda1, lambda2)));

        float3 conic = float3(cov.z, -cov.y, cov.x) * rcp(det + 1e-15);
        view.conicRadius = float4(conic, radius);

        float3 worldViewDir = _WorldCameraPos - centerWorldPos;
        float3 objViewDir = mul((float3x3)_MatrixWorldToObject, worldViewDir);
        objViewDir = normalize(objViewDir);

        view.color.rgb = GS_computeColorFromSH(splat.shs, objViewDir, _SHDeg);
        view.color.a = splat.opacity;
    }

    _GSViewBuffer[idx] = view;
}
